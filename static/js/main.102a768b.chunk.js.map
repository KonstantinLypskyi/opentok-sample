{"version":3,"sources":["MeetingRoom.js","HomePage.js","index.js"],"names":["App","apiKey","sessionId","token","session","useRef","handleError","error","alert","message","useEffect","current","OT","initSession","publisher","initPublisher","insertMode","width","height","connect","publish","on","event","subscribe","stream","initializeSession","className","id","onClick","checkScreenSharingCapability","response","supported","extensionRegistered","extensionInstalled","console","log","videoSource","HomePage","useState","meetingData","setMeetingData","isLoading","setLoading","handleStartMeeting","a","fetch","SERVER_BASE_URL","json","data","MeetingRoom","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPAyFeA,EArFH,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,OAAQC,EAAuB,EAAvBA,UAAWC,EAAY,EAAZA,MACxBC,EAAUC,iBAAO,MAEjBC,EAAc,SAACC,GACbA,GACFC,MAAMD,EAAME,UAkElB,OAJAC,qBAAU,YA1DgB,WACtBN,EAAQO,QAAUC,IAAGC,YAAYZ,EAAQC,GAKzC,IAAIY,EAAYF,IAAGG,cAAc,qBAAsB,CACrDC,WAAY,UACZC,MAAO,OACPC,OAAQ,QACPZ,GAGHF,EAAQO,QAAQQ,QAAQhB,GAAO,SAASI,GAElCA,EACFD,EAAYC,GAEZH,EAAQO,QAAQS,QAAQN,EAAWR,MAIvCF,EAAQO,QAAQU,GAAG,iBAAiB,SAASC,GACzClB,EAAQO,QAAQY,UAAUD,EAAME,OAAQ,sBAAuB,CAC7DR,WAAY,UACZC,MAAO,OACPC,OAAQ,QACPZ,MAgCPmB,KACD,IAGH,yBAAKC,UAAU,OACX,yBAAKA,UAAU,WACX,yBAAKA,UAAU,sBACX,yBAAKC,GAAG,wBAEZ,yBAAKD,UAAU,uBACX,yBAAKC,GAAG,yBAEZ,4BAAQD,UAAU,eAAeE,QAvCnB,kBAAMhB,IAAGiB,8BAA6B,SAASC,GACjE,GAAIA,EAASC,YAA8C,IAAjCD,EAASE,oBAE5B,IAAoC,IAAhCF,EAASG,wBAEb,CAEHC,QAAQC,IAAIvB,IAAGG,eAEjB,IAAID,EAAYF,IAAGG,cAAc,qBAC/B,CAACqB,YAAa,SAAUpB,WAAY,UAAWC,MAAO,OAAQC,OAAQ,SACtE,SAASX,GACHA,GAGFH,EAAQO,QAAQS,QAAQN,GAAW,SAASP,qBAwBhD,YCzDG8B,EAvBE,WAAO,IAAD,EACmBC,mBAAS,MAD5B,mBACZC,EADY,KACCC,EADD,OAEaF,oBAAS,GAFtB,mBAEZG,EAFY,KAEDC,EAFC,KAIbC,EAAkB,uCAAG,8BAAAC,EAAA,4DACD,0CAEtBF,GAAW,GAHY,SAKAG,MAAMC,mDALN,cAKjBhB,EALiB,gBAMJA,EAASiB,OANL,OAMjBC,EANiB,OAQvBR,EAAeQ,GARQ,2CAAH,qDAWxB,OAAIT,EAAoB,kBAACU,EAAiBV,GAEtCE,EAAkB,4CAGtB,4BAAQb,QAASe,GAAjB,oBCnBJO,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.102a768b.chunk.js","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useRef,useEffect } from 'react';\nimport OT from '@opentok/client';\n\nconst App = ({ apiKey, sessionId, token }) => {\n    const session = useRef(null);\n\n    const handleError = (error) => {\n        if (error) {\n          alert(error.message);\n        }\n      }\n\n    const initializeSession = () => {\n        session.current = OT.initSession(apiKey, sessionId);\n      \n        // Subscribe to a newly created stream\n      \n        // Create a publisher\n        var publisher = OT.initPublisher('original-publisher', {\n          insertMode: 'replace',\n          width: '100%',\n          height: '100%'\n        }, handleError);\n      \n        // Connect to the session\n        session.current.connect(token, function(error) {\n          // If the connection is successful, publish to the session\n          if (error) {\n            handleError(error);\n          } else {\n            session.current.publish(publisher, handleError);\n          }\n        });\n\n        session.current.on('streamCreated', function(event) {\n            session.current.subscribe(event.stream, 'original-subscriber', {\n              insertMode: 'replace',\n              width: '100%',\n              height: '100%'\n            }, handleError);\n          });\n\n      }\n\n      const handleShare = () => OT.checkScreenSharingCapability(function(response) {\n        if(!response.supported || response.extensionRegistered === false) {\n          // This browser does not support screen sharing.\n        } else if (response.extensionInstalled === false) {\n          // Prompt to install the extension.\n        } else {\n\n            console.log(OT.initPublisher)\n          // Screen sharing is available. Publish the screen.\n          var publisher = OT.initPublisher('original-publisher',\n            {videoSource: 'screen', insertMode: 'replace', width: '100%', height: '100%'},\n            function(error) {\n              if (error) {\n                // Look at error.message to see what went wrong.\n              } else {\n                session.current.publish(publisher, function(error) {\n                  if (error) {\n                    // Look error.message to see what went wrong.\n                  }\n                });\n              }\n            }\n          );\n        }\n      });\n\n    useEffect(() => {\n        initializeSession();\n    }, []);\n\n    return (\n    <div className=\"app\">\n        <div className=\"wrapper\">\n            <div className=\"original-publisher\">\n                <div id=\"original-publisher\"></div>\n            </div>\n            <div className=\"original-subscriber\">\n                <div id=\"original-subscriber\"></div>\n            </div>\n            <button className=\"share-button\" onClick={handleShare}>Share</button>\n        </div>\n    </div>\n)}\n\nexport default App;\n","import React, { useState } from 'react';\n\nimport MeetingRoom from './MeetingRoom';\n\nconst HomePage = () => {\n    const [meetingData, setMeetingData] = useState(null);\n    const [isLoading, setLoading] = useState(false);\n\n    const handleStartMeeting = async () => {\n        var SERVER_BASE_URL = 'https://opentok-sample12.herokuapp.com/';\n\n        setLoading(true);\n\n        const response = await fetch(SERVER_BASE_URL + '/session');\n        const data = await response.json();\n\n        setMeetingData(data);\n    }\n\n    if (meetingData) return <MeetingRoom { ...meetingData } />\n\n    if (isLoading) return <div>Loading ...</div>\n\n    return (\n    <button onClick={handleStartMeeting}>Start a meeting</button>\n)};\n\nexport default HomePage;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport HomePage from './HomePage';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HomePage />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}