{"version":3,"sources":["history.js","HomePage.js","MeetingRoom.js","Router.js","index.js"],"names":["createBrowserHistory","redirectTo","path","state","query","replacePrevHistory","search","qs","stringify","payload","pathname","isRedirectedFromApp","history","replace","push","HomePage","useState","isLoading","handleStartMeeting","a","fetch","SERVER_BASE_URL","response","json","data","window","location","reload","onClick","App","defaultParameter","parse","ignoreQueryPrefix","getQsData","apiKey","sessionId","token","session","useRef","handleError","error","alert","message","useEffect","current","OT","initSession","publisher","initPublisher","insertMode","width","height","connect","publish","on","event","subscribe","stream","initializeSession","className","id","checkScreenSharingCapability","supported","extensionRegistered","extensionInstalled","console","log","videoSource","Routes","MeetingRoom","ReactDOM","render","StrictMode","Router","document","getElementById"],"mappings":"mTAEeA,gBCEFC,EAAa,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,KAAMC,EAAuC,EAAvCA,MAAOC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBACvCC,EAASF,GAASG,IAAGC,UAAUJ,GAG/BK,EAAU,CAAEC,SAAUR,EAAMC,MADhB,aAAKQ,qBAAqB,GAASR,GACEG,OAAO,IAAD,OAAMA,GAAU,KAE7E,OAAOD,EAAqBO,EAAQC,QAAQJ,GAAWG,EAAQE,KAAKL,IAuBzDM,EAnBE,WAAO,IAAD,EACaC,oBAAS,GADtB,mBACZC,EADY,KAGbC,GAHa,KAGK,uCAAG,8BAAAC,EAAA,4DACD,0CADC,SAGAC,MAAMC,mDAHN,cAGjBC,EAHiB,gBAIJA,EAASC,OAJL,OAIjBC,EAJiB,OAMvBvB,EAAW,CAAEC,KAAM,WAAYE,MAAOoB,IACtCC,OAAOC,SAASC,QAAO,GAPA,2CAAH,sDAUxB,OAAIV,EAAkB,4CAGtB,4BAAQW,QAASV,GAAjB,oB,gBCsEWW,EAvFH,WAAO,IAAD,EARA,WAA4B,IAA3BC,EAA0B,uDAAP,GACpC,OAAIL,OAAOC,SAASpB,OACT,eAAKwB,EAAZ,GAAiCvB,IAAGwB,MAAMN,OAAOC,SAASpB,OAAQ,CAAE0B,mBAAmB,KAGpFF,EAIgCG,GAA7BC,EADM,EACNA,OAAQC,EADF,EACEA,UAAWC,EADb,EACaA,MAErBC,EAAUC,iBAAO,MAEjBC,EAAc,SAACC,GACbA,GACFC,MAAMD,EAAME,UAkElB,OAJAC,qBAAU,YA1DgB,WACtBN,EAAQO,QAAUC,IAAGC,YAAYZ,EAAQC,GAKzC,IAAIY,EAAYF,IAAGG,cAAc,qBAAsB,CACrDC,WAAY,UACZC,MAAO,OACPC,OAAQ,QACPZ,GAGHF,EAAQO,QAAQQ,QAAQhB,GAAO,SAASI,GAElCA,EACFD,EAAYC,GAEZH,EAAQO,QAAQS,QAAQN,EAAWR,MAIvCF,EAAQO,QAAQU,GAAG,iBAAiB,SAASC,GACzClB,EAAQO,QAAQY,UAAUD,EAAME,OAAQ,sBAAuB,CAC7DR,WAAY,UACZC,MAAO,OACPC,OAAQ,QACPZ,MAgCPmB,KACD,IAGH,yBAAKC,UAAU,OACX,yBAAKA,UAAU,WACX,yBAAKA,UAAU,sBACX,yBAAKC,GAAG,wBAEZ,yBAAKD,UAAU,uBACX,yBAAKC,GAAG,yBAEZ,4BAAQD,UAAU,eAAe/B,QAvCnB,kBAAMiB,IAAGgB,8BAA6B,SAASvC,GACjE,GAAIA,EAASwC,YAA8C,IAAjCxC,EAASyC,oBAE5B,IAAoC,IAAhCzC,EAAS0C,wBAEb,CAEHC,QAAQC,IAAIrB,IAAGG,eAEjB,IAAID,EAAYF,IAAGG,cAAc,qBAC/B,CAACmB,YAAa,SAAUlB,WAAY,UAAWC,MAAO,OAAQC,OAAQ,SACtE,SAASX,GACHA,GAGFH,EAAQO,QAAQS,QAAQN,GAAW,SAASP,qBAwBhD,YCtEK4B,EAbA,kBACb,kBAAC,IAAD,CAAQxD,QAASA,GACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOV,KAAK,YACV,kBAACmE,EAAD,OAEF,kBAAC,IAAD,CAAOnE,KAAK,KACV,kBAAC,EAAD,UCdZoE,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.a0ce081b.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();","import React, { useState } from 'react';\nimport qs from 'qs';\nimport history from './history';\n\nexport const redirectTo = ({ path, state, query, replacePrevHistory }) => {\n    const search = query && qs.stringify(query);\n    // add new flag to location state, that can be used in history go back function\n    const updatedState = { isRedirectedFromApp: true, ...state };\n    const payload = { pathname: path, state: updatedState, search: `?${search || ''}` };\n\n    return replacePrevHistory ? history.replace(payload) : history.push(payload);\n};\n\n\nconst HomePage = () => {\n    const [isLoading, setLoading] = useState(false);\n\n    const handleStartMeeting = async () => {\n        var SERVER_BASE_URL = 'https://opentok-sample12.herokuapp.com/';\n\n        const response = await fetch(SERVER_BASE_URL + '/session');\n        const data = await response.json();\n\n        redirectTo({ path: '/meeting', query: data });\n        window.location.reload(false); \n    }\n\n    if (isLoading) return <div>Loading ...</div>\n\n    return (\n    <button onClick={handleStartMeeting}>Start a meeting</button>\n)};\n\nexport default HomePage;","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useRef,useEffect } from 'react';\nimport OT from '@opentok/client';\nimport qs from 'qs';\n\nconst getQsData = (defaultParameter = {}) => {\n  if (window.location.search) {\n      return { ...defaultParameter, ...qs.parse(window.location.search, { ignoreQueryPrefix: true }) };\n  }\n\n  return defaultParameter;\n};\n\nconst App = () => {\n    const { apiKey, sessionId, token } = getQsData();\n\n    const session = useRef(null);\n\n    const handleError = (error) => {\n        if (error) {\n          alert(error.message);\n        }\n      }\n\n    const initializeSession = () => {\n        session.current = OT.initSession(apiKey, sessionId);\n      \n        // Subscribe to a newly created stream\n      \n        // Create a publisher\n        var publisher = OT.initPublisher('original-publisher', {\n          insertMode: 'replace',\n          width: '100%',\n          height: '100%'\n        }, handleError);\n      \n        // Connect to the session\n        session.current.connect(token, function(error) {\n          // If the connection is successful, publish to the session\n          if (error) {\n            handleError(error);\n          } else {\n            session.current.publish(publisher, handleError);\n          }\n        });\n\n        session.current.on('streamCreated', function(event) {\n            session.current.subscribe(event.stream, 'original-subscriber', {\n              insertMode: 'replace',\n              width: '100%',\n              height: '100%'\n            }, handleError);\n          });\n\n      }\n\n      const handleShare = () => OT.checkScreenSharingCapability(function(response) {\n        if(!response.supported || response.extensionRegistered === false) {\n          // This browser does not support screen sharing.\n        } else if (response.extensionInstalled === false) {\n          // Prompt to install the extension.\n        } else {\n\n            console.log(OT.initPublisher)\n          // Screen sharing is available. Publish the screen.\n          var publisher = OT.initPublisher('original-publisher',\n            {videoSource: 'screen', insertMode: 'replace', width: '100%', height: '100%'},\n            function(error) {\n              if (error) {\n                // Look at error.message to see what went wrong.\n              } else {\n                session.current.publish(publisher, function(error) {\n                  if (error) {\n                    // Look error.message to see what went wrong.\n                  }\n                });\n              }\n            }\n          );\n        }\n      });\n\n    useEffect(() => {\n        initializeSession();\n    }, []);\n\n    return (\n    <div className=\"app\">\n        <div className=\"wrapper\">\n            <div className=\"original-publisher\">\n                <div id=\"original-publisher\"></div>\n            </div>\n            <div className=\"original-subscriber\">\n                <div id=\"original-subscriber\"></div>\n            </div>\n            <button className=\"share-button\" onClick={handleShare}>Share</button>\n        </div>\n    </div>\n)}\n\nexport default App;\n","import React from 'react';\nimport {\n    Router,\n    Switch,\n    Route,\n  } from 'react-router-dom';\n\n  import HomePage from './HomePage';\n  import MeetingRoom from './MeetingRoom';\n\n  import history from './history';\n\n  const Routes = () => (\n    <Router history={history}>\n        <Switch>\n          <Route path=\"/meeting\">\n            <MeetingRoom />\n          </Route>\n          <Route path=\"/\">\n            <HomePage />\n          </Route>\n        </Switch>\n    </Router>\n  );\n\n  export default Routes;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Router from './Router';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}